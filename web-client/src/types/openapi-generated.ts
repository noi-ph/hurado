/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/users/login": {
    post: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Login"];
          };
        };
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["UserError"];
          };
        };
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginPayload"];
        };
      };
    };
  };
  "/v1/users/register": {
    post: {
      responses: {
        /** OK */
        200: unknown;
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["UserError"];
          };
        };
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RegisterPayload"];
        };
      };
    };
  };
  "/v1/users/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["UserError"];
          };
        };
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserEditPayload"];
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/v1/users/{id}/all-details": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["UserDetailed"];
          };
        };
        /** Unauthorized */
        403: unknown;
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/v1/tasks/{idOrSlug}": {
    get: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Task"];
          };
        };
        /** Not logged in */
        401: unknown;
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Task"];
          };
        };
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["TaskError"];
          };
        };
        /** Not logged in */
        401: unknown;
        /** Unauthorized */
        403: unknown;
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TaskPayload"];
        };
      };
    };
    post: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["SubmissionError"];
          };
        };
        /** Not logged in */
        401: unknown;
        /** Unauthorized */
        403: unknown;
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SubmissionPayload"];
        };
      };
    };
    parameters: {
      path: {
        idOrSlug: string;
      };
    };
  };
  "/v1/tasks/{idOrSlug}/all-details": {
    get: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["TaskDetailed"];
          };
        };
        /** Not logged in */
        401: unknown;
        /** Unauthorized */
        403: unknown;
        /** Not found */
        404: unknown;
        /** Internal server error */
        500: unknown;
      };
    };
    parameters: {
      path: {
        idOrSlug: string;
      };
    };
  };
  "/v1/tasks": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["TaskSummary"][];
          };
        };
        /** Internal server error */
        500: unknown;
      };
    };
    post: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Task"];
          };
        };
        /** Bad request */
        400: {
          content: {
            "application/json": components["schemas"]["TaskError"];
          };
        };
        /** Not logged in */
        401: unknown;
        /** Unauthorized */
        403: unknown;
        /** Internal server error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TaskPayload"];
        };
      };
    };
  };
}

export interface components {
  schemas: {
    LoginPayload: {
      email: string;
      password: string;
    };
    RegisterPayload: {
      email: string;
      username: string;
      password: string;
      passwordConfirm: string;
    };
    UserEditPayload: {
      email?: string;
      username?: string;
      school?: string;
      name?: string;
      country?: string;
      password?: string;
      passwordConfirm?: string;
    };
    SubmissionPayload: {
      id?: string;
      languageCode: string;
      contestId?: string;
    };
    FilePayload: {
      id?: string;
      name: string;
      size: number;
      contents: unknown;
    };
    ScriptPayload: {
      id?: string;
      file: components["schemas"]["FilePayload"];
      languageCode: string;
      runtimeArgs: string;
    };
    SubtaskPayload: {
      id?: string;
      name: string;
      order: number;
      scoreMax: number;
      scorerScript: components["schemas"]["ScriptPayload"];
      validatorScript: components["schemas"]["ScriptPayload"];
      testDataPattern: string[];
    };
    TaskAttachmentPayload: {
      id?: string;
      file: components["schemas"]["FilePayload"];
    };
    TestDataPayload: {
      id?: string;
      order: number;
      name: string;
      inputFile: components["schemas"]["FilePayload"];
      outputFile: components["schemas"]["FilePayload"];
      judgeFile?: components["schemas"]["FilePayload"];
      isSample: boolean;
    };
    TaskDeveloperPayload: {
      id?: string;
      username: string;
      order: number;
      role: string;
    };
    TaskPayload: {
      title: string;
      slug: string;
      description?: string;
      statement: string;
      allowedLanguages: string;
      taskType: string;
      scoreMax: number;
      checkerScript: components["schemas"]["ScriptPayload"];
      timeLimit: number;
      memoryLimit: number;
      compileTimeLimit: number;
      compileMemoryLimit: number;
      submissionSizeLimit: number;
      validatorScript?: components["schemas"]["ScriptPayload"];
      isPublicInArchive: boolean;
      subtasks?: components["schemas"]["SubtaskPayload"][];
      attachments?: components["schemas"]["TaskAttachmentPayload"][];
      data?: components["schemas"]["TestDataPayload"][];
      developers?: components["schemas"]["TaskDeveloperPayload"][];
    };
    UserError: {
      email?: string;
      username?: string;
      password?: string;
      passwordConfirm?: string;
      country?: string;
    };
    SubmissionError: {
      languageCode?: string;
    };
    FileError: {
      name?: string;
      size?: string;
      contents?: string;
    };
    ScriptError: {
      file?: components["schemas"]["FileError"];
      languageCode?: string;
      runtimeArgs?: string;
    };
    SubtaskError: {
      name?: string;
      order?: string;
      scoreMax?: string;
      scorerScript?: components["schemas"]["ScriptError"];
      validatorScript?: components["schemas"]["ScriptError"];
      testDataPattern?: string;
    };
    TaskAttachmentError: {
      file?: components["schemas"]["FileError"];
    };
    TestDataError: {
      order?: string;
      name?: string;
      inputFile?: components["schemas"]["FileError"];
      outputFile?: components["schemas"]["FileError"];
      judgeFile?: components["schemas"]["FileError"];
      isSample?: string;
    };
    TaskDeveloperError: {
      username?: string;
      order?: string;
      role?: string;
    };
    TaskError: {
      title?: string;
      slug?: string;
      description?: string;
      statement?: string;
      allowedLanguages?: string;
      taskType?: string;
      scoreMax?: string;
      checkerScript?: components["schemas"]["ScriptError"];
      timeLimit?: string;
      memoryLimit?: string;
      compileTimeLimit?: string;
      compileMemoryLimit?: string;
      submissionSizeLimit?: string;
      validatorScript?: components["schemas"]["ScriptError"];
      isPublicInArchive?: string;
      subtasks?: components["schemas"]["SubtaskError"][];
      attachments?: components["schemas"]["TaskAttachmentError"][];
      data?: components["schemas"]["TestDataError"][];
      developers?: components["schemas"]["TaskDeveloperError"][];
    };
    User: {
      id: string;
      email: string;
      username: string;
      createdAt: string;
      isAdmin: boolean;
      school?: string;
      name?: string;
      country: string;
    };
    UserDetailed: {
      id: string;
      email: string;
      username: string;
      createdAt: string;
      isAdmin: boolean;
      school?: string;
      name?: string;
      country: string;
      tasks: { [key: string]: unknown };
      develops: { [key: string]: unknown };
      submissions: { [key: string]: unknown };
      contests: { [key: string]: unknown };
      participations: { [key: string]: unknown };
    };
    Login: {
      jwt: string;
      user: components["schemas"]["User"];
    };
    Task: {
      title: string;
      slug: string;
      description?: string;
      statement: string;
      allowedLanguages: string;
      taskType: string;
      scoreMax: number;
      timeLimit: number;
      memoryLimit: number;
      compileTimeLimit: number;
      compileMemoryLimit: number;
      submissionSizeLimit: number;
      isPublicInArchive: boolean;
    };
    TaskDetailed: {
      owner: components["schemas"]["User"];
      checkerScript: components["schemas"]["ScriptPayload"];
      validatorScript?: components["schemas"]["ScriptPayload"];
      attachments?: components["schemas"]["TaskAttachmentPayload"][];
      developers?: components["schemas"]["TaskDeveloperPayload"][];
      testData?: components["schemas"]["TestDataPayload"][];
      appearsIn?: { [key: string]: unknown }[];
      submissions?: components["schemas"]["SubmissionPayload"][];
      subtasks?: components["schemas"]["SubtaskPayload"][];
      title: string;
      slug: string;
      description?: string;
      statement: string;
      allowedLanguages: string;
      taskType: string;
      scoreMax: number;
      timeLimit: number;
      memoryLimit: number;
      compileTimeLimit: number;
      compileMemoryLimit: number;
      submissionSizeLimit: number;
      isPublicInArchive: boolean;
    } & {
      id: unknown;
    };
    TaskSummary: {
      id: string;
      title: string;
      slug: string;
      description?: string;
      isPublicInArchive: boolean;
    };
  };
}

export interface operations {}

export interface external {}
